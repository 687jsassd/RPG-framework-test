------------------------------------------
#: 属性完善
##:1 玩家等级和经验值
- 添加玩家等级和经验值属性到玩家类
- 实现玩家击败敌人后根据敌人等级和类型给予不同量经验值增加的逻辑
- 设计经验值到等级的转换公式（如指数增长或线性增长），并实现等级提升功能
- 记录玩家每次升级的时间点，用于后续分析玩家成长速度

##:2 完善玩家属性与装备属性
- 添加SPD（速度）、MP（魔法值）、MDEF（魔法防御）、LUCK（幸运值）等属性到玩家类
- 设计这些属性对游戏战斗和角色能力的影响规则
- 为装备类添加对应属性的加成或惩罚效果
- 实现装备穿戴时属性即时更新到玩家角色的逻辑
------------------------------------------
#: 颜色系统
##:X1 增加部分输出的颜色
- 为输出信息添加颜色，如角色名称、属性值、战斗信息等
- 使用ANSI转义序列或终端库来实现颜色效果
- 设计颜色方案，使输出信息更易读和美观

##:X2 角色品质和装备品质的颜色区分
- 使用不同颜色区分角色和装备品质（如普通、精良、史诗等）
------------------------------------------
#: 材质系统，重量系统，体积系统
##:P1 材质系统
- 添加材质系统，为物品、装备、角色等添加材质属性
- 设计不同材质对物品或角色的属性加成或惩罚效果
- 实现材质的随机生成和分配逻辑

##:P2 重量系统
- 为物品、装备、角色等添加重量属性
- 实现重量计算和显示逻辑

##:P3 体积系统
- 为物品、装备、角色等添加体积属性
- 设计体积对角色背包容量的影响规则
------------------------------------------
#TODO: 装备系统完善
##:3 装备耐久系统实现
- 为每件装备添加耐久度属性
- 设定装备在战斗中或特定行为下耐久度的消耗规则
- 实现装备耐久度为零时装备损坏的提示和逻辑处理
- 设计耐久度修复的NPC或商店服务

##:4 装备修复系统
- 添加修复装备的功能到NPC或商店服务中
- 设定修复所需的资源（如金币、特定材料）和费用计算规则
- 实现修复装备时的资源扣除和耐久度恢复逻辑
- 提供修复成功或失败的反馈机制

##TODO:5 装备强化系统
- 添加装备强化功能到NPC或商店服务中
- 设定强化所需的资源（如金币、强化石）和条件（如装备等级、耐久度）
- 设计强化的成功率和失败机制，包括强化等级上限和失败惩罚
- 实现强化后的属性提升计算，并即时更新到装备上

##TODO:6 装备评分策略
- 制定装备评分的标准和算法，考虑装备的基础属性、加成效果、稀有度等因素
- 实现装备评分的自动计算功能，并在装备信息中显示评分
- 根据评分划分装备品质等级（如普通、精良、史诗等）

##TODO:7 按照装备评分策略实现装备排序
- 在装备列表或背包界面中添加按评分排序的功能
- 实现排序后的装备信息更新和显示

##:8 装备鉴定系统
- 添加装备鉴定功能到NPC服务中
- 设定鉴定所需的资源（ 如鉴定卷轴、金币）和条件（如装备类型）
- 实现鉴定后的装备信息揭示或属性解锁逻辑，并更新到装备信息中
------------------------------------------

------------------------------------------
#TODO: 技能系统
##TODO:9 技能系统与主动技能
- 设计技能树和技能学习机制，包括技能的前置条件、学习费用等
- 实现主动技能的使用逻辑，包括技能发动条件、效果计算等
- 添加技能描述和图标到技能信息中
------------------------------------------

------------------------------------------
#: 队伍与敌群
##:10 队伍类实现
- 创建队伍类，用于管理玩家角色和队伍状态（如队伍等级、经验值）
- 实现队伍的创建、添加角色和移除角色等接口
- 设计队伍战斗时的属性加成和惩罚规则

##:11 队伍管理
- 添加队伍管理功能，如调整队伍成员顺序、设置队伍位置等
- 实现队伍信息的显示和更新逻辑

##:12 敌群类实现
- 创建敌群类，用于管理多个敌人的状态和战斗逻辑
- 实现敌群的创建、添加敌人、移除敌人等接口
- 设计敌群的属性和状态（如敌群等级、经验值），以及战斗时的行为模式
------------------------------------------

------------------------------------------
#TODO: 战斗系统
##TODO:13 敌人子类与掉落
- 创建不同类型的敌人子类，包括基础属性和战斗行为
- 设定敌人的掉落物品规则，考虑敌人等级、类型等因素
- 实现敌人掉落物品的随机性和概率控制

##TODO:14 1v1 战斗逻辑
- 实现基本的单挑战斗逻辑，包括攻击顺序、伤害计算等
- 添加战斗动画或文字描述功能（尽管目前基于终端）

##TODO:15 一对多战斗逻辑
- 设计多个敌人同时与玩家角色战斗的逻辑
- 实现敌人之间的战斗协作和仇恨机制（如集火、嘲讽等）

##TODO:16 多对多战斗逻辑
- 实现多个玩家角色与多个敌人之间的战斗逻辑
- 设计战斗队伍的切换和战术布置功能
------------------------------------------

------------------------------------------
#TODO: 效果实装
##TODO:17 被动技能实现
- 实现被动技能的效果触发逻辑，包括战斗内外的影响
- 添加被动技能的描述和图标到技能信息中

##TODO:18 状态异常实现
- 设计各种状态异常（如中毒、麻痹）的效果和持续时间
- 实现状态异常的施加和解除逻辑
- 添加状态异常的图标和提示信息到游戏中

##TODO:19 套装效果实现
- 添加套装效果的判定和触发机制，考虑装备组合和数量
- 实现套装效果的计算和更新逻辑
- 添加套装效果的描述和图标到装备信息中

##TODO:20 特殊效果实现
- 实现其他特殊效果，如暴击、闪避、吸血等
- 设计这些特殊效果的触发条件和计算规则
------------------------------------------

------------------------------------------
#TODO: 商店系统
##TODO:21 货币系统实现
- 添加金币和货币系统到游戏中
- 实现货币的获取（如击败敌人、完成任务）和消耗（如购买物品、修复装备）逻辑
- 添加货币的显示和更新功能到游戏界面中

##TODO:22 商店系统实现
- 实现商店的购买和出售功能，包括物品选择和交易确认
- 添加商店的库存和补货机制，考虑物品的稀有度和需求
- 设计商店的物品价格和折扣策略，以及玩家购买历史记录功能

##TODO:23 收藏物品功能实现
- 添加收藏物品的功能到背包或商店界面中
- 实现收藏物品的不可售卖和不可丢弃机制
- 添加收藏物品列表的显示和更新功能

##TODO:24 批量出售功能实现
- 添加批量出售的功能到背包或商店界面中
- 实现批量选择物品并出售的逻辑处理（如按评分或类型筛选）
- 提供批量出售成功或失败的反馈机制
------------------------------------------

------------------------------------------
#TODO: 任务和成就系统
##TODO:25 任务系统实现
- 创建任务的创建、追踪和完成奖励机制
- 设计不同类型的任务（如主线、支线、日常）和触发条件
- 实现任务进度的显示和更新功能到游戏界面中

##TODO:26 成就系统实现
- 设计成就的记录和奖励机制，考虑成就的达成条件和奖励类型
- 实现成就的显示和更新功能到游戏界面中
- 添加成就达成的提示和庆祝动画或文字描述（尽管目前基于终端）
------------------------------------------

------------------------------------------
#TODO: 地图与剧情系统
##TODO:27 地图与场景设计
- 设计游戏的地图结构，包括场景划分、路径连接等
- 实现场景移动逻辑，包括自动寻路和手动移动功能
- 添加地图的显示和更新功能到游戏界面中（考虑基于文本的简单表示）

##TODO:28 NPC设计与对话系统
- 创建NPC的对话系统，包括对话文本、选项和分支
- 设计NPC的不同行动判定逻辑（如攻击、交易、任务发布等）
- 实现NPC的显示和交互功能到游戏界面中

##TODO:29 剧情与事件设计
- 设计游戏的主线剧情和支线事件，考虑剧情的连贯性和吸引力
- 实现剧情触发和进展的逻辑处理
- 添加剧情动画或文字描述功能（尽管目前基于终端）以增强沉浸感
------------------------------------------

------------------------------------------
#TODO: 存档与继承系统
##TODO:30 存档与读取功能实现
- 实现游戏进度的保存和加载功能到游戏菜单中
- 设计存档文件的格式和存储位置
- 添加存档时的提示和确认机制以防止误操作

##TODO:31 存档继承机制设计
- 实现跨版本的存档继承和覆盖机制
- 设计存档版本检测和兼容性处理的逻辑
- 提供存档继承成功或失败的反馈机制

##TODO:32 存档验证机制设计
- 实现存档的验证机制以防止非法存档的加载
- 设计验证规则和算法来检测存档的完整性和合法性
- 添加存档验证失败时的处理逻辑（如删除非法存档、提示玩家等）
------------------------------------------
#TODO: 角色,战斗和技能拓展
##TODO:X3 部位系统
- 添加角色部位系统，包括头部、身体、手、脚等部位
- 部位应该有独立的血量,防御,等属性和装备等属性
- 实现部位受伤,破坏和修复逻辑
- 实现技能需要部位存在的条件逻辑
- 实现破坏部位对角色本体的属性影响逻辑

------------------------------------------
#TODO: 随机事件系统
##TODO:33 随机事件系统设计
- 添加随机事件的发生机制到游戏中
- 设计随机事件的类型和影响范围（如天气变化、怪物突袭等）
- 实现随机事件的触发和处理逻辑到游戏循环中
------------------------------------------

------------------------------------------
#TODO: 拓展性与MOD支持
##TODO:34 MOD系统设计与支持
- 设计MOD的支持功能以允许玩家自定义游戏内容（如角色、装备、任务等）
- 实现MOD的加载和卸载机制以及版本兼容性处理
- 提供MOD制作指南和工具以提高玩家的参与度和创造力
------------------------------------------

------------------------------------------
#TODO: 游戏演示版本制作
##TODO:35 DEMO制作计划与实施
- 制定游戏演示版本（DEMO）的制作计划，包括目标功能、展示内容等
- 实施DEMO的制作过程，确保功能完整性和稳定性
- 对DEMO进行测试和调试以修复潜在问题和优化性能表现
------------------------------------------
